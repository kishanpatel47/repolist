import React, {Component} from 'react';
import {Text, View, FlatList, Image, TouchableOpacity} from 'react-native';

import {colors} from '../Untils/colors';
import Customschedual from './Customschedual/Customschedual';
import moment from 'moment';
let days = [];
let daysRequired = 5;
let i = 0;
for (i = i; i < daysRequired; i++) {
  days.push(moment().add(i, 'days').format('DD-MMMM-YYYY'));
}

const rows = [
  {
    isExpanded: false,
    url: require('../Image/sunrise.png'),
    Slot: 'Morning',
    timeinterval: '8:00Am to 12:00Pm',
    url1: require('../Image/chevron.png'),

    subSlot: [
      {
        id: 1,
        Time: '8:00Am',
      },
      {
        id: 2,
        Time: '8:20Am',
      },
      {
        id: 3,
        Time: '8:40Am',
      },
      {
        id: 4,
        Time: '9:00Am',
      },
      {
        id: 3,
        Time: '8:40Am',
      },
      {
        id: 4,
        Time: '9:00Am',
      },
      {
        id: 5,
        Time: '9:20Am',
      },
      {
        id: 6,
        Time: '9:20Am',
      },
    ],
  },
  {
    isExpanded: false,
    url: require('../Image/afternoon.png'),
    Slot: 'Afternoon',
    timeinterval: '12:00pm to 4:00pm',
    url1: require('../Image/chevron.png'),
    subSlot: [
      {
        id: 5,
        Time: '12:00Pm',
      },
      {
        id: 6,
        Time: '12:20Pm',
      },
    ],
  },
  {
    isExpanded: false,
    url: require('../Image/moon.png'),
    Slot: 'Evening',
    timeinterval: '4:00pm to 8:00pm',
    url1: require('../Image/chevron.png'),
    subSlot: [
      {
        id: 5,
        Time: '4:00pm',
      },
      {
        id: 6,
        Time: '4:20pm',
      },
      {
        id: 7,
        Time: '4:40pm',
      },
      {
        id: 8,
        Time: '5:00pm',
      },
      {
        id: 8,
        Time: '5:20pm',
      },
    ],
  },
];
export default class Visitclinic extends Component {
  constructor(props) {
    super(props);
    this.state = {
      schedualshot: [
        {
          id: 1,
          shot: '2 slots available',
        },
        {id: 2, shot: '4 slots available'},
        {
          id: 3,
          shot: '6 slots available',
        },
        {
          id: 4,
          shot: '8 slots available',
        },
        {
          id: 5,
          shot: '10 slots available',
        },
        {
          id: 6,
          shot: '2 slots available',
        },
        {
          id: 7,
          shot: '4 slots available',
        },
        {
          id: 8,
          shot: '4 slots available',
        },
        {
          id: 9,
          shot: '2 slots available',
        },
        {id: 10, shot: '4 slots available'},
        {
          id: 11,
          shot: '6 slots available',
        },
        {
          id: 12,
          shot: '8 slots available',
        },
        {
          id: 13,
          shot: '10 slots available',
        },
        {
          id: 14,
          shot: '2 slots available',
        },
        {
          id: 15,
          shot: '4 slots available',
        },
        {
          id: 16,
          shot: '4 slots available',
        },
        {
          id: 17,
          shot: '2 slots available',
        },
        {id: 18, shot: '4 slots available'},
        {
          id: 19,
          shot: '6 slots available',
        },
        {
          id: 20,
          shot: '8 slots available',
        },
        {
          id: 21,
          shot: '10 slots available',
        },
        {
          id: 22,
          shot: '2 slots available',
        },
        {
          id: 23,
          shot: '4 slots available',
        },
        {
          id: 24,
          shot: '4 slots available',
        },
        {
          id: 25,
          shot: '2 slots available',
        },
        {id: 26, shot: '4 slots available'},
        {
          id: 27,
          shot: '6 slots available',
        },
        {
          id: 28,
          shot: '8 slots available',
        },
        {
          id: 29,
          shot: '10 slots available',
        },
        {
          id: 30,
          shot: '2 slots available',
        },
        {
          id: 31,
          shot: '4 slots available',
        },
        {
          id: 8,
          shot: '4 slots available',
        },
      ],

      dropicon: false,
      isexpanded: false,

      isExpandIndex: 0,
      data: rows,
    };
  }

  titleview = () => {
    return (
      <View style={{padding: 15}}>
        <Text
          style={{
            fontFamily: 'Prompt-SemiBoldItalic',
            fontWeight: '700',
            fontSize: 19,
            color: colors.Black,
          }}
          onPress={() => {
            alert(
              'visitclinic' + JSON.stringify(this.state.schedualshot, null, 3),
            );
          }}>
          Schedual
        </Text>
      </View>
    );
  };

  renderTimeSloat = (item, index) => {
    let items = [];
    const row = item.subSlot;
    items = row.map(rowItem => {
      return (
        <Text
          style={{
            // flexShrink: 1,
            color: colors.Blue,
          }}>
          {rowItem.Time}
        </Text>
      );
    });
  };

  render() {
    // const renderItem = ({item}) => {
    //   return (
    //     <View
    //       style={{
    //         flex: 1,
    //         alignItems: 'center',
    //         marginVertical: 5,
    //         marginTop: 5,
    //         alignSelf: 'center',
    //       }}>
    //       <Customschedual item={item} days={days} />
    //     </View>
    //   );
    // };

    const morningview = ({item, index}) => {
      let items = [];
      const row = item.subSlot;
      // item = row.map(rowItem => {
      //   return <Text>{rowItem.Time}</Text>;
      // });
      items = (
        <View
          numColumns
          style={{
            flexDirection: 'row',
            alignItems: 'center',
            // width: 60,
            // height: 30,
            // flex: 1,
            flexWrap: 'wrap',
            // padding: 5,
            // margin: 5,

            backgroundColor: colors.bluelight,
          }}>
          </View>
          {} item =row.map(rowItem =>{
          {
            <Text
              style={{
                backgroundColor: 'purple',
                fontSize: 15,
                flexShrink: 1,
                color: colors.Blue,
              }}>
              {rowItem.Time}
            </Text>
            }

          }
    
      );

      return (
        <TouchableOpacity
          style={{flex: 1, justifyContent: 'center'}}
          onPress={() => {
            this.setState({
              isExpandIndex: this.state.isExpandIndex == index ? -1 : index,
            });
          }}>
          <View style={{marginTop: 20}}>
            <View
              style={{
                alignItems: 'center',
                flexDirection: 'row',
                backgroundColor:
                  this.state.isExpandIndex == index
                    ? colors.bluelight
                    : colors.Cultured,
                padding: 5,
              }}>
              <Image
                style={{
                  tintColor:
                    this.state.isExpandIndex == index
                      ? colors.Cylindrical_coordinate
                      : colors.Black,
                }}
                source={item.url}></Image>
              <Text
                style={{
                  marginLeft: 15,
                  color:
                    this.state.isExpandIndex == index
                      ? colors.white
                      : colors.Black,
                }}>
                {item.Slot}
              </Text>
              <Text
                style={{
                  marginLeft: 15,
                  color:
                    this.state.isExpandIndex == index
                      ? colors.white
                      : colors.Black,
                }}>
                {item.timeinterval}
              </Text>
              <TouchableOpacity
                style={{flex: 1, justifyContent: 'center'}}
                onPress={() => {
                  this.setState({
                    isExpandIndex:
                      this.state.isExpandIndex == index ? -1 : index,
                  });
                }}>
                <View
                  style={{
                    flex: 1,
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}>
                  <Image
                    style={{
                      alignSelf: 'flex-end',
                      tintColor:
                        this.state.isExpandIndex == index
                          ? colors.white
                          : colors.Black,
                    }}
                    source={item.url1}></Image>
                </View>
              </TouchableOpacity>
            </View>
            {this.state.isExpandIndex == index ? (
              <View
                style={{
                  //he ight: this.state.isExpandIndex - index,
                  overflow: 'scroll',
                  flexDirection: 'column-reverse',
                  backgroundColor:
                    this.state.isExpandIndex == index
                      ? colors.bluelight
                      : colors.Cultured,
                }}>
                {items}
              </View>
            ) : null}
          </View>
        </TouchableOpacity>
      );
    };
    return (
      <View>
        {this.titleview()}
        <FlatList
          horizontal={true}
          data={days}
          renderItem={({item, index}) => (
            <View
              style={{
                flex: 1,
                alignItems: 'center',
                marginVertical: 5,
                marginTop: 5,
                alignSelf: 'center',
              }}>
              <Customschedual
                item={this.state.schedualshot[index]}
                days={days[index]}
              />
            </View>
          )}
          keyExtractor={item => item.key}
          contentContainerStyle={{margin: 5, textAlign: 'center'}}
          ItemSeparatorComponent={this.renderSeparator}
        />

        <View style={{padding: 15, marginTop: 10}}>
          <Text
            style={{
              fontFamily: 'Prompt-SemiBoldItalic',
              fontSize: 19,
              fontWeight: '700',
              color: colors.Cylindrical_coordinate,
            }}>
            {days[0]}
          </Text>
        </View>
        <FlatList
          data={this.state.data}
          renderItem={morningview}
          style={{marginHorizontal: 10}}></FlatList>

        <View
          numColumns
          style={{
            flexDirection: 'row',
            // alignItems: 'center',
            // alignSelf: 'center',
            justifyContent: 'space-evenly',
            // width: 60,
            // height: 60,
            // flex: 1,
            flexWrap: 'wrap',
            padding: 5,
            margin: 5,

            backgroundColor: colors.bluelight,
          }}>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              margin: 5,
              padding: 8,
              color: colors.Blue,
              borderRadius: 8,
            }}>
            {'2:00 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
              padding: 8,
            }}>
            {'2:20 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
          <Text
            style={{
              backgroundColor: 'white',
              fontSize: 15,
              // flexShrink: 1,
              color: colors.Blue,
              margin: 5,
            }}>
            {'2:40 PM'}
          </Text>
        </View>

        <View style={{}}>
          <TouchableOpacity
            onPress={() => {
              // this.props.navigation.navigate('PatientDeaties');
            }}>
            <View
              style={{
                borderColor: colors.white,
                flexDirection: 'row',
                alignItems: 'center',
                position: 'relative',
                marginTop: 40,
                bottom: 0,
                paddingBottom: 80,
                alignSelf: 'center',

                display: 'flex',
              }}>
              <Text
                style={{
                  letterSpacing: 1,
                  fontFamily: 'Prompt-SemiBoldItalic',
                  fontWeight: '800',
                  paddingRight: 2,
                  fontFamily: 'PromptMedium',
                  color: colors.Cylindrical_coordinate,
                }}>
                Continue
              </Text>
              <Image
                style={{
                  height: 40,
                  width: 19,
                  top: 1.0,

                  tintColor: colors.Cylindrical_coordinate,
                  alignItems: 'flex-end',
                  alignSelf: 'flex-end',
                  resizeMode: 'center',
                }}
                source={
                  this.state.dropicon
                    ? require('../Image/arrow-down-sign-to-navigate.png')
                    : require('../Image/rightarrow.png')
                }></Image>
            </View>
          </TouchableOpacity>
        </View>
      </View>
    );
  }
}




 var subArray = [];
    for (i = 0; i < daysRequired; i++) {
        var newItem = {
            id: i.toString,
            date: moment()
                .add(i, "days")
                .format(" DD-MMM-yyyy"),
            Slot: i + " slot available ",
        };
        subArray.push(newItem);
        // days.push(
        //     moment()
        //         .add(i, "days")
        //         .format(" DD- MMMM")
        // );
    }

